var camera, scene, renderer, loader, model, controls, rotlight, soundInstance;var volumeLight;var platform1, platform2, platform3, platform4, platform5, platform6;var spotTar;function init() {	var assetPath = "assets/";	var modelSrc = "dino.json"	var groundSrc = "ground.jpg";		//Camera	scene  = new THREE.Scene();	camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );    camera.lookAt(new THREE.Vector3(-10,1,-80));	camera.position.set( 5, 2.5, 7 );	//Renderer	renderer = new THREE.WebGLRenderer( { } );	renderer.setSize( window.innerWidth, window.innerHeight );		//EQ	var spotTarget  = new THREE.BoxGeometry(0,0,0);	var eqPart 		= new THREE.BoxGeometry( 6, 1, 10 );	var eqMat 		= new THREE.MeshPhongMaterial( { color: 0x229988, shininess: 40 } );	var beatMat		= new THREE.MeshPhongMaterial( { color: 0xaa5555, shininess: 50 } );	var bestEqMat 	= new THREE.MeshPhongMaterial( { color: 0xbbbbff, shininess: 60 } );			platform1 = new THREE.Mesh( eqPart, eqMat );	platform2 = new THREE.Mesh( eqPart, eqMat );	platform3 = new THREE.Mesh( eqPart, eqMat );	platform4 = new THREE.Mesh( eqPart, eqMat );	platform5 = new THREE.Mesh( eqPart, eqMat );	platform6 = new THREE.Mesh( eqPart, eqMat );	spotTar = new THREE.Mesh( spotTarget, eqMat);		platform1.applyMatrix( new THREE.Matrix4().makeTranslation(-30, 0, -80) );	platform2.applyMatrix( new THREE.Matrix4().makeTranslation(-20, 0, -80) );	platform3.applyMatrix( new THREE.Matrix4().makeTranslation(-10, 0, -80) );	platform4.applyMatrix( new THREE.Matrix4().makeTranslation(  0, 0, -80) );	platform5.applyMatrix( new THREE.Matrix4().makeTranslation( 10,	0, -80) );	platform6.applyMatrix( new THREE.Matrix4().makeTranslation( 20,	0, -80) );	spotTar.applyMatrix( new THREE.Matrix4().makeTranslation(0, 6, -80) );		var eqSpotLight = new THREE.SpotLight(0x99ccFF);	eqSpotLight.position.set(0,1,-10);	eqSpotLight.castShadow = true;	eqSpotLight.target = spotTar;	scene.add(eqSpotLight);		scene.add( platform1 );	scene.add( platform2 );	scene.add( platform3 );	scene.add( platform4 );	scene.add( platform5 );	scene.add( platform6 );	scene.add( spotTar );		/*Floor	var texture = THREE.ImageUtils.loadTexture( assetPath + groundSrc );		texture.format = THREE.RGBFormat;	var groundMaterial = new THREE.MeshPhongMaterial( { color: 0xffffff, ambient: 0x444444, map: texture } );*/	var groundMaterial = new THREE.MeshPhongMaterial( { color: 0xffffff, ambient: 0xffffff } );	var mesh = new THREE.Mesh( new THREE.PlaneBufferGeometry( 512, 512, 2, 2 ), groundMaterial );	mesh.position.y = -0.1;	mesh.rotation.x = - Math.PI / 2;	scene.add( mesh );	//Lights	scene.add( new THREE.AmbientLight( 0x050505 ) );	var intensity = 1.5;	var distance = 18;	var c1 = 0x66ff66;	//var sphere = new THREE.SphereGeometry( 0.25, 14, 8 );	volumeLight = new THREE.PointLight( c1, intensity, distance );	//volumeLight.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: c1 } ) ) );	volumeLight.position.y = 14;	scene.add( volumeLight );		//Model	loader = new THREE.JSONLoader();    loader.load( assetPath + modelSrc, function( geometry ) {		model = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( { ambient: 0x555555, color: 0x555555, shininess: 40, shading: THREE.SmoothShading }  )  );		model.scale.set( 1, 1, 1 );		scene.add( model );	} );	document.body.appendChild( renderer.domElement );}function updateEqPlatforms(b){	platform1.scale.set(1, b[0] * 0.2, 1);	platform2.scale.set(1, b[1] * 0.2, 1);	platform3.scale.set(1, b[2] * 0.2, 1);	platform4.scale.set(1, b[3] * 0.2, 1);	platform5.scale.set(1, b[4] * 0.2, 1);	platform6.scale.set(1, b[5] * 0.2, 1);}function changeLight(i){	volumeLight.intensity = i*0.15;}function animate() {  requestAnimationFrame( animate );  render();}function render() {	renderer.render( scene, camera );}function onWindowResize(){	if($(window).width() < 1300) {		$("#bandDetails").hide();	} else {		$("#bandDetails").show();	}  camera.aspect = window.innerWidth / window.innerHeight;  camera.updateProjectionMatrix();  renderer.setSize( window.innerWidth, window.innerHeight );}