var camera, scene, renderer, loader, model, controls;init();animate();function init() {  camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );	camera.position.set( 2, 2, 3 );  scene  = new THREE.Scene();  controls = new THREE.OrbitControls( camera );  controls.addEventListener( 'change', render );  // Grid	var size = 14, step = 1;	var geometry = new THREE.Geometry();	var material = new THREE.LineBasicMaterial( { color: 0x303030 } );	for ( var i = - size; i <= size; i += step ) {		geometry.vertices.push( new THREE.Vector3( - size, - 0.04, i ) );		geometry.vertices.push( new THREE.Vector3(   size, - 0.04, i ) );		geometry.vertices.push( new THREE.Vector3( i, - 0.04, - size ) );		geometry.vertices.push( new THREE.Vector3( i, - 0.04,   size ) );	}	var line = new THREE.Line( geometry, material, THREE.LinePieces );	scene.add( line );	// Add the model  loader = new THREE.JSONLoader();  loader.load( "dino.json", function( geometry ) {      model = new THREE.Mesh( geometry, new THREE.MeshNormalMaterial({ shading: THREE.SmoothShading }) );      model.scale.set( 0.5, 0.5, 0.5 );      scene.add( model );  } );	renderer = new THREE.WebGLRenderer();	renderer.setSize( window.innerWidth, window.innerHeight );  document.body.appendChild( renderer.domElement );  window.addEventListener( 'resize', onWindowResize, false );}function animate() {  requestAnimationFrame( animate );  render();}function render() {	renderer.render( scene, camera );}function onWindowResize(){  camera.aspect = window.innerWidth / window.innerHeight;  camera.updateProjectionMatrix();  renderer.setSize( window.innerWidth, window.innerHeight );}